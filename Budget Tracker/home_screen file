import 'package:flutter/material.dart';

class HomeScreen extends StatefulWidget {
  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class Expense {
  String title;
  double amount;

  Expense({required this.title, required this.amount});
}

class _HomeScreenState extends State<HomeScreen> {
  List<Expense> expenses = [
    Expense(title: 'Groceries', amount: 120),
    Expense(title: 'Bills', amount: 50),
  ];
  double? monthlysal;

  void _addExpense() {
    TextEditingController titleController = TextEditingController();
    TextEditingController amountController = TextEditingController();

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text('Add Expense'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: titleController,
              decoration: InputDecoration(hintText: "Expense Name"),
            ),
            TextField(
              controller: amountController,
              decoration: InputDecoration(hintText: "Amount"),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              String title = titleController.text.trim();
              double? amount = double.tryParse(amountController.text.trim());
              if (title.isNotEmpty && amount != null) {
                setState(() {
                  expenses.add(Expense(title: title, amount: amount));
                });
              }
              Navigator.of(context).pop();
            },
            child: Text("Add"),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("Cancel"),
          ),
        ],
      ),
    );
  }

  void _editExpense(int index) {
    TextEditingController titleController = TextEditingController();
    TextEditingController amountController = TextEditingController();

    titleController.text = expenses[index].title;
    amountController.text = expenses[index].amount.toString();

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text('Edit Expense'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: titleController,
              decoration: InputDecoration(hintText: "Expense Name"),
            ),
            TextField(
              controller: amountController,
              decoration: InputDecoration(hintText: "Amount"),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              String title = titleController.text.trim();
              double? amount = double.tryParse(amountController.text.trim());
              if (title.isNotEmpty && amount != null) {
                setState(() {
                  expenses[index].title = title;
                  expenses[index].amount = amount;
                });
              }
              Navigator.of(context).pop();
            },
            child: Text("Save"),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("Cancel"),
          ),
        ],
      ),
    );
  }

  void _deleteExpense(int index) {
    setState(() {
      expenses.removeAt(index);
    });
  }

  void _enterIncome() {
    TextEditingController incomeController = TextEditingController();
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text("Enter Monthly Income"),
        content: TextField(
          controller: incomeController,
          keyboardType: TextInputType.number,
          decoration: InputDecoration(hintText: 'Monthly Income'),
        ),
        actions: [
          TextButton(
            onPressed: () {
              double? income = double.tryParse(incomeController.text.trim());
              if (income != null) {
                setState(() {
                  monthlysal = income;
                });
              }
              Navigator.of(context).pop();
            },
            child: Text("Save"),
          ),
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("Cancel"),
          ),
        ],
      ),
    );
  }

  void _analyze() {
    if (monthlysal == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("Please enter your monthly income first")),
      );
      return;
    }

    double totalExpenses = expenses.fold(0, (sum, item) => sum + item.amount);
    double limit = 0.3 * monthlysal!;

    String message = totalExpenses > limit
        ? "Deficit! Your expenses exceed 30% of your income."
        : "Good! You are within your limit.";

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: Text("Analysis Result"),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("OK"),
          ),
        ],
      ),
    );
  }

  void _openMenu() {
    showModalBottomSheet(
      context: context,
      builder: (_) => Wrap(
        children: [
          ListTile(
            leading: Icon(Icons.input),
            title: Text('Enter Monthly Income'),
            onTap: () {
              Navigator.of(context).pop();
              _enterIncome();
            },
          ),
          ListTile(
            leading: Icon(Icons.analytics),
            title: Text('Analyze'),
            onTap: () {
              Navigator.of(context).pop();
              _analyze();
            },
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: CustomScrollView(
        slivers: [
          SliverAppBar(
            expandedHeight: 125,
            floating: true,
            forceElevated: true,
            backgroundColor: Colors.green,
            flexibleSpace: FlexibleSpaceBar(
              title: Text(
                "Budget Tracker",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              centerTitle: true,
            ),
            leading: IconButton(
              onPressed: _addExpense,
              icon: Icon(Icons.add, size: 30),
            ),
            actions: [
              IconButton(
                icon: Icon(Icons.menu, size: 30),
                onPressed: _openMenu,
              ),
            ],
          ),
          SliverToBoxAdapter(
            child: Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                children: expenses
                    .asMap()
                    .entries
                    .map(
                      (entry) => Container(
                    height: 140,
                    width: double.infinity,
                    margin: EdgeInsets.only(bottom: 16),
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(16),
                      color: Colors.white,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 2,
                          offset: Offset(0, 4),
                        ),
                      ],
                    ),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Padding(
                              padding:
                              const EdgeInsets.only(left: 16, top: 16),
                              child: Text(
                                entry.value.title,
                                style: TextStyle(
                                  fontSize: 30,
                                  fontWeight: FontWeight.w500,
                                  color: Colors.black,
                                ),
                              ),
                            ),
                            SizedBox(height: 20),
                            IconButton(
                              icon: Icon(Icons.edit,
                                  size: 30, color: Colors.green),
                              onPressed: () => _editExpense(entry.key),
                            ),
                          ],
                        ),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: [
                            Padding(
                              padding:
                              const EdgeInsets.only(right: 16, top: 16),
                              child: Text(
                                "\$${entry.value.amount}",
                                style: TextStyle(
                                  fontWeight: FontWeight.w500,
                                  fontSize: 30,
                                  color: Colors.black,
                                ),
                              ),
                            ),
                            SizedBox(height: 20),
                            IconButton(
                              icon: Icon(Icons.delete,
                                  size: 30, color: Colors.red),
                              onPressed: () => _deleteExpense(entry.key),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                )
                    .toList(),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
